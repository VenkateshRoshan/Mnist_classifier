name: Deploy Docker Image to AWS

on:
  push:
    branches:
      - main

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/private_key
        chmod 600 ~/.ssh/private_key
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Install Dependencies and Deploy to EC2
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USERNAME: ubuntu
        AWS_REGION: ${{ secrets.AWS_REGION }}
        ECR_REGISTRY: 841162707028.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
      run: |
        ssh -i ~/.ssh/private_key -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST << 'ENDSSH'
          # Install AWS CLI v2 if not present
          if ! command -v aws &> /dev/null; then
            cd /tmp
            sudo apt-get update
            sudo apt-get install -y unzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -q awscliv2.zip
            sudo ./aws/install
            rm awscliv2.zip
            rm -rf aws
          fi

          # Get the Docker login command and execute it directly (avoiding the TTY issue)
          DOCKER_LOGIN_CMD=$(aws ecr get-login-password --region ${AWS_REGION})
          echo "${DOCKER_LOGIN_CMD}" | sudo docker login --username AWS --password-stdin "${ECR_REGISTRY}"

          # Set the full image name
          IMAGE_NAME="${ECR_REGISTRY}/mnist/gradio-app:latest"

          # Pull new image
          sudo docker pull "${IMAGE_NAME}"

          # Stop and remove existing container (if exists)
          if sudo docker ps -a --format '{{.Names}}' | grep -q "^gradio-app$"; then
            sudo docker stop gradio-app
            sudo docker rm gradio-app
          fi

          # Run new container
          sudo docker run -d \
            --name gradio-app \
            -p 7860:7860 \
            "${IMAGE_NAME}"

          # Verify the container is running
          sudo docker ps | grep gradio-app
        ENDSSH